{
  "name": "Unity-multiplayer",
  "tagline": "",
  "body": "### Unity - Multiplayer\r\nUnity와 Socket.io 이용해서 Multiplayer를 구현하는 방법에 대해 소개하려고 함.\r\n대략 이정도 수준의 결과물이 나올 예정.\r\n\r\n<iframe src=\"https://vid.me/e/rzdx?stats=1\" width=\"854\" height=\"480\" frameborder=\"0\" allowfullscreen webkitallowfullscreen mozallowfullscreen scrolling=\"no\"></iframe>\r\n\r\n### 먼저 설치해야 할 것. (버전은 달라도 잘 될 가능성 높음.)\r\nUnity 5, Node.js v6.5.0, Atom Editor v1.10.2\r\n\r\n\r\n### 서버의 역할\r\n* 서버는 모든 플레이어의 위치를 기억해 두기\r\n* 접속하고 있는 모든 클라이언트들에게 모든 플레이어들의 위치를 알려주기\r\n\r\n### 클라이언트의 역할\r\n* 메인 플레이어의 위치를 서버에게 알려주기\r\n* 메인 플레이어 조작하기\r\n* 서버가 다른 플레이어의 위치를 알려주면 업데이트 하기.\r\n\r\n\r\n### 1. 스타팅 포인트 다운받기\r\n\r\n먼저 공굴리기 유니티 프로젝트 준비하기.  \r\n공에 콘트롤러 붙여서 맵을 돌아다니기만 하는게 끝임.  \r\n그냥 다운받아도 되고 직접 따라가면서 해봐도 됨.\r\n\r\n[그냥 다운받기 (권장)](https://github.com/co2meal/unity-multiplayer/raw/master/Unity-Multiplayer-Starting-Point.zip)  \r\n[직접 따라가기](https://unity3d.com/kr/learn/tutorials/projects/roll-ball-tutorial/setting-play-area?playlist=17141)\r\n(2-2 Setting up the play area 까지.)\r\n\r\n다운받았으면, 압축을 풀고 Unity에서 불러옴.\r\n\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/%EC%8A%A4%ED%83%80%ED%8C%85%20%ED%8F%AC%EC%9D%B8%ED%8A%B8%20%EC%82%AC%EC%A7%84%201.PNG)\r\n\r\n\r\n### 2. Socket.io 설치 및 서버 프로그래밍\r\n\r\n#### 1. Project 폴더에 새폴더를 만들고 Server라고 이름을 지음\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/2.1%20-%20Socket%20IO%20%EC%BD%94%EB%93%9C%EC%9A%A9%20%ED%8F%B4%EB%8D%94%20%EB%A7%8C%EB%93%A4%EA%B8%B0.PNG)\r\n\r\n#### 2. Server폴더에 Shift - 우클릭으로 \"여기서 명령 창 열기\" 누름.\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/2.2%20-%20%EC%97%AC%EA%B8%B0%EC%84%9C%20%EB%AA%85%EB%A0%B9%20%EC%B0%BD%20%EC%97%B4%EA%B8%B0.PNG)\r\n\r\n#### 3. `npm install socket.io`로 `socket.io` 패키지 설치. 아래와 같이 결과가 나오면 성공한 것임.\r\n```\r\nE:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer\\Server>npm install socket.io\r\nE:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer\\Server\r\n`-- socket.io@1.4.8\r\n  +-- debug@2.2.0\r\n  | `-- ms@0.7.1\r\n  +-- engine.io@1.6.11\r\n  | +-- accepts@1.1.4\r\n  | | +-- mime-types@2.0.14\r\n  | | | `-- mime-db@1.12.0\r\n  | | `-- negotiator@0.4.9\r\n  | +-- base64id@0.1.0\r\n  | +-- engine.io-parser@1.2.4\r\n  | | +-- after@0.8.1\r\n  | | +-- arraybuffer.slice@0.0.6\r\n  | | +-- base64-arraybuffer@0.1.2\r\n  | | +-- blob@0.0.4\r\n  | | +-- has-binary@0.1.6\r\n  | | `-- utf8@2.1.0\r\n  | `-- ws@1.1.0\r\n  |   +-- options@0.0.6\r\n  |   `-- ultron@1.0.2\r\n  +-- has-binary@0.1.7\r\n  | `-- isarray@0.0.1\r\n  +-- socket.io-adapter@0.4.0\r\n  | `-- socket.io-parser@2.2.2\r\n  |   +-- debug@0.7.4\r\n  |   `-- json3@3.2.6\r\n  +-- socket.io-client@1.4.8\r\n  | +-- backo2@1.0.2\r\n  | +-- component-bind@1.0.0\r\n  | +-- component-emitter@1.2.0\r\n  | +-- engine.io-client@1.6.11\r\n  | | +-- component-inherit@0.0.3\r\n  | | +-- has-cors@1.1.0\r\n  | | +-- parsejson@0.0.1\r\n  | | +-- parseqs@0.0.2\r\n  | | +-- ws@1.0.1\r\n  | | +-- xmlhttprequest-ssl@1.5.1\r\n  | | `-- yeast@0.1.2\r\n  | +-- indexof@0.0.1\r\n  | +-- object-component@0.0.3\r\n  | +-- parseuri@0.0.4\r\n  | | `-- better-assert@1.0.2\r\n  | |   `-- callsite@1.0.0\r\n  | `-- to-array@0.1.4\r\n  `-- socket.io-parser@2.2.6\r\n    +-- benchmark@1.0.0\r\n    +-- component-emitter@1.1.2\r\n    `-- json3@3.3.2\r\n\r\nnpm WARN enoent ENOENT: no such file or directory, open 'E:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer\\Server\\package.json'\r\nnpm WARN Server No description\r\nnpm WARN Server No repository field.\r\nnpm WARN Server No README data\r\nnpm WARN Server No license field.\r\n```\r\n\r\n#### 4. Atom으로 프로젝트 폴더 열기\r\n```\r\nE:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer\\Server>cd ..\r\nE:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer>atom .\r\n```\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/2.4%20-%20Atom%EC%9C%BC%EB%A1%9C%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%ED%8F%B4%EB%8D%94%20%EC%97%B4%EA%B8%B0.PNG)\r\n\r\n#### 5. Server 폴더에 app.js 파일 생성\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/2.5%20-%20Atom%EC%97%90%EC%84%9C%20app.js%20%EB%A7%8C%EB%93%A4%EA%B8%B0.PNG)\r\n\r\n#### 6. 아주 단순한 서버 코드 복붙하기\r\n```javascript\r\nvar io = require('socket.io')(80)\r\n\r\nio.on('connection', function(socket){\r\n  console.log('a user connected')\r\n\r\n  socket.on('disconnect', function() {\r\n    console.log('user disconnect')\r\n  })\r\n})\r\n\r\n```\r\n\r\n#### 7. 서버 코드 실행 및 보안 허용\r\n```\r\nE:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer\\Server>node app.js\r\n```\r\n![](https://raw.githubusercontent.com/co2meal/unity-multiplayer/master/2.7%20-%20%EB%B3%B4%EC%95%88%EA%B2%BD%EA%B3%A0%20%EC%95%A1%EC%84%B8%EC%8A%A4%20%ED%97%88%EC%9A%A9.PNG)\r\n\r\n### Socket IO 클라이언트\r\n\r\n1. SocketIO 애셋 다운로드\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/3.1%20-%20Unity%20Asset%20Store%EC%97%90%EC%84%9C%20Socket.IO%20for%20Unity%20%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C.PNG)\r\n\r\n2. Project - Assets-SocketIO-Prefabs 에 있는 SocketIO Scene에 복사\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/3.2%20-%20Project%20-%20Assets-SocketIO-Prefabs%20%EC%97%90%20%EC%9E%88%EB%8A%94%20SocketIO%20Scene%EC%97%90%20%EB%B3%B5%EC%82%AC.PNG)\r\n\r\n3. SocketIO Prefab의 Inspector에서 URL을 수정\r\n![](https://github.com/co2meal/unity-multiplayer/raw/master/3.3%20-%20SocketIO%20Prefab%EC%9D%98%20Inspector%EC%97%90%EC%84%9C%20URL%EC%9D%84%20%EC%88%98%EC%A0%95.PNG)\r\n\r\n4. 실행 및 유저가 접속하고 나가는 것을 서버에서 확인.\r\n```\r\nE:\\Users\\ㅁㅁㅁ\\Documents\\Unity-Multiplayer\\Server>node app.js\r\na user connected\r\nuser disconnect\r\n```\r\n\r\n### 위치 동기화\r\n#### App.js 수정 (step by step 설명 필요하지만 일단 넘어가기)\r\n```javascript\r\n/*\r\n  Server version 2\r\n  It supports syncing players.\r\n*/\r\nvar io = require('socket.io')(80)\r\n\r\nvar players = {}\r\n\r\nio.on('connection', function(socket){\r\n  console.log('a user connected')\r\n\r\n  socket.on('disconnect', function() {\r\n    console.log('user disconnect')\r\n    if (socket.id in players) delete players[socket.id]\r\n  })\r\n\r\n  socket.on('sync', function(player) {\r\n    /*\r\n      player:\r\n        id: String, but empty\r\n        position: [float, float, float]\r\n        rotation: [float, float, float]\r\n    */\r\n    player.id = socket.id\r\n\r\n    // update server's player list\r\n    players[player.id] = player\r\n\r\n    // broadcast to other clients\r\n    socket.broadcast('sync', player)\r\n\r\n    // Print current players for debugging\r\n    printPlayers()\r\n  })\r\n})\r\n\r\nfunction printPlayers() {\r\n  console.log(players)\r\n}\r\n\r\n```\r\n\r\n\r\n#### Client 코드 작성\r\n\r\n##### 1. 플레이어 게임 오브젝트에 PlayerSyncer.cs 스크립트 생성하고 다음을 복붙.\r\n![](https://raw.githubusercontent.com/co2meal/unity-multiplayer/master/4.2.3%20-%20%ED%94%8C%EB%A0%88%EC%9D%B4%EC%96%B4%20%EA%B2%8C%EC%9E%84%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%97%90%20PlayerSyncer%20%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%83%9D%EC%84%B1.PNG)\r\n```cs\r\n﻿using UnityEngine;\r\nusing SocketIO;\r\nusing System;\r\nusing System.Collections;\r\n\r\npublic class PlayerSyncer : MonoBehaviour {\r\n\r\n\tpublic static SocketIOComponent socket = null;\r\n\t// Use this for initialization\r\n\tvoid Start () {\r\n\t\tGameObject go = GameObject.Find(\"SocketIO\");\r\n\t\tsocket = go.GetComponent<SocketIOComponent>();\r\n\t}\r\n\r\n\t// Update is called once per frame\r\n\tvoid Update () {\r\n\t\tPlayerData player_data = new PlayerData(transform);\r\n\t\tsocket.Emit(\"sync\", player_data.ToJSONObject());\r\n\t}\r\n}\r\n\r\n[Serializable]\r\npublic class PlayerData {\r\n\tpublic string id = \"undefined\";\r\n\tpublic Vector3 position;\r\n\tpublic Quaternion rotation;\r\n\r\n\tpublic PlayerData(Transform transform) {\r\n\t\tposition = transform.position;\r\n\t\trotation = transform.rotation;\r\n\t}\r\n\r\n\tpublic JSONObject ToJSONObject() {\r\n\t\treturn new JSONObject(JsonUtility.ToJson(this));\r\n\t}\r\n}\r\n```\r\n\r\n\r\n##### 2. 다른플레이어들 게임오브젝트 생성 및 프리팹 준비\r\n1. Projects -> Create -> Create Empty\r\n2. \"다른플레이어들\" 으로 이름 변경\r\n3. \"플레이어\"에 우클릭 -> Duplicate\r\n4. \"다른플레이어들\"로 이동, \"다른플레이어 프리팹\"으로 이름 변경\r\n5. \"다른플레이어 프리팹\"의 스크립트 모두 삭제\r\n6. Project/Assets/Materials 밑의 Albedo Material을 \"다른플레이어 프리팹\"에 적용\r\n![](https://raw.githubusercontent.com/co2meal/unity-multiplayer/master/4.2.2%20-%20%EB%8B%A4%EB%A5%B8%ED%94%8C%EB%A0%88%EC%9D%B4%EC%96%B4%20%ED%94%84%EB%A6%AC%ED%8C%B9%20%EC%A4%80%EB%B9%84%201.PNG)\r\n7. Project에서 Assets/Prefabs 폴더 생성 후 \"다른플레이어 프리팹\" 드래그앤 드롭\r\n8. 다른플레이어들 아래 다른플레이어 프리팹 삭제\r\n![](https://raw.githubusercontent.com/co2meal/unity-multiplayer/master/4.2.2%20-%20%EB%8B%A4%EB%A5%B8%ED%94%8C%EB%A0%88%EC%9D%B4%EC%96%B4%20%ED%94%84%EB%A6%AC%ED%8C%B9%20%EC%A4%80%EB%B9%84%202.PNG)\r\n\r\n##### 3. \"다른플레이어들\"에 OtherPlayersSyncer.cs 스크립트 생성하고 복붙, 프리팹 적용\r\n```cs\r\n﻿using UnityEngine;\r\nusing SocketIO;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\n\r\npublic class OtherPlayersSyncer : MonoBehaviour {\r\n\tpublic GameObject otherPlayerPrefab;\r\n\tprivate static SocketIOComponent socket = null;\r\n\tprivate Dictionary<string, GameObject> otherPlayersDict = new Dictionary<string, GameObject>();\r\n\t// Use this for initialization\r\n\tvoid Start () {\r\n\t\tGameObject go = GameObject.Find(\"SocketIO\");\r\n\t\tsocket = go.GetComponent<SocketIOComponent>();\r\n\r\n\t\tsocket.On(\"sync\", OnSync);\r\n\t\tsocket.On(\"remove\", OnRemove);\r\n\t}\r\n\r\n\tGameObject FindOrCreatePlayer(PlayerData player_data) {\r\n\t\tif (!otherPlayersDict.ContainsKey(player_data.id)) {\r\n\t\t\tGameObject newPlayer = Instantiate(\r\n\t\t\t\t\totherPlayerPrefab,\r\n\t\t\t\t\tplayer_data.position,\r\n\t\t\t\t\tplayer_data.rotation) as GameObject;\r\n\t\t\tnewPlayer.transform.parent = GameObject.Find(\"다른플레이어들\").transform;\r\n\r\n\t\t\totherPlayersDict.Add(player_data.id, newPlayer);\r\n\t\t}\r\n\r\n\t\treturn otherPlayersDict[player_data.id];\r\n\t}\r\n\r\n\tvoid OnSync(SocketIOEvent e) {\r\n\t\tPlayerData player_data = new PlayerData(e.data);\r\n\r\n\t\t// Create other player object if it does not exist.\r\n\t\tGameObject player = FindOrCreatePlayer(player_data);\r\n\t\tplayer.transform.position = player_data.position;\r\n\t\tplayer.transform.rotation = player_data.rotation;\r\n\t}\r\n\r\n\tvoid OnRemove(SocketIOEvent e) {\r\n\t\tPlayerData player_data = new PlayerData(e.data);\r\n\t\tif (otherPlayersDict.ContainsKey(player_data.id)) {\r\n\t\t\tDestroy(otherPlayersDict[player_data.id]);\r\n\t\t\totherPlayersDict.Remove(player_data.id);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n![]()\r\n\r\n##### 4. Build & Run\r\n1. File-Bulid Setting-Player Settings...-Run In Background 체크\r\n![]()\r\n2. Fild-Build Run-파일이름 run.exe으로 저장 및 실행\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}